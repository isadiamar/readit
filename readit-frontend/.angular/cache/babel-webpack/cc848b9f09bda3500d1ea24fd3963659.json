{
  "ast": null,
  "code": "import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { catchError, EMPTY, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/router\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http, snackBar, router) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.successfulNotification = undefined;\n      this.errorNotification = undefined;\n    }\n\n    param(key, value) {\n      if (value != null) {\n        this.params = this.params.append(key, value); // This class is immutable\n      }\n\n      return this;\n    }\n\n    paramsFrom(dto) {\n      Object.getOwnPropertyNames(dto).forEach(item => this.param(item, dto[item]));\n      return this;\n    }\n\n    successful(notification = 'Successful') {\n      // @ts-ignore\n      this.successfulNotification = notification;\n      return this;\n    }\n\n    post(endpoint, body) {\n      return this.http.post(endpoint, body, this.createOptions()).pipe(map(response => this.extractData(response)), catchError(error => this.handleError(error)));\n    }\n\n    header(key, value) {\n      if (value != null) {\n        this.headers = this.headers.append(key, value); // This class is immutable\n      }\n\n      return this;\n    }\n\n    resetOptions() {\n      this.headers = new HttpHeaders();\n      this.params = new HttpParams();\n      this.responseType = 'json';\n    }\n\n    createOptions() {\n      const options = {\n        headers: this.headers,\n        params: this.params,\n        responseType: this.responseType,\n        observe: 'response'\n      };\n      this.resetOptions();\n      return options;\n    }\n\n    extractData(response) {\n      if (this.successfulNotification) {\n        this.snackBar.open(this.successfulNotification, '', {\n          duration: 2000\n        });\n        this.successfulNotification = undefined;\n      }\n\n      const contentType = response.headers.get('content-type');\n\n      if (contentType) {\n        if (contentType.indexOf('application/pdf') !== -1) {\n          const blob = new Blob([response.body], {\n            type: 'application/pdf'\n          });\n          window.open(window.URL.createObjectURL(blob));\n        } else if (contentType.indexOf('application/json') !== -1) {\n          return response.body; // with 'text': JSON.parse(response.body);\n        }\n      } else {\n        return response;\n      }\n    }\n\n    showError(notification) {\n      if (this.errorNotification) {\n        this.snackBar.open(this.errorNotification, 'Error', {\n          duration: 5000\n        });\n        this.errorNotification = undefined;\n      } else {\n        this.snackBar.open(notification, 'Error', {\n          duration: 5000\n        });\n      }\n    }\n\n    handleError(response) {\n      let error;\n\n      if (response.status === HttpService.UNAUTHORIZED) {\n        this.showError('Unauthorized');\n        this.router.navigate(['']).then();\n        return EMPTY;\n      } else if (response.status === HttpService.CONNECTION_REFUSE) {\n        this.showError('Connection Refuse');\n        return EMPTY;\n      } else {\n        try {\n          error = response.error; // with 'text': JSON.parse(response.error);\n\n          this.showError(error.error + ' (' + response.status + '): ' + error.message);\n          return throwError(() => error);\n        } catch (e) {\n          this.showError('Not response');\n          return throwError(() => response.error);\n        }\n      }\n    }\n\n  }\n\n  HttpService.CONNECTION_REFUSE = 0;\n  HttpService.UNAUTHORIZED = 401;\n\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.Router));\n  };\n\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
